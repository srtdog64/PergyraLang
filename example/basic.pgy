/*
 * Copyright (c) 2025 Pergyra Language Project
 * All rights reserved.
 *
 * This example demonstrates basic Pergyra language features
 * including slot-based memory management and parallel processing.
 *
 * Licensed under BSD 3-Clause License.
 */

// Pergyra 언어 기본 예제
// 슬롯 기반 메모리 관리와 병렬 처리 데모

// 기본 슬롯 사용법
let counterSlot = ClaimSlot<Int>()
Write(counterSlot, 0)

// 반복문에서 슬롯 사용
for i in 1..10 {
    let current = Read(counterSlot)
    Write(counterSlot, current + i)
}

Log("최종 카운터 값:", Read(counterSlot))
Release(counterSlot)

// 스코프 기반 슬롯 관리
with slot<String> as message {
    message.Write("안녕하세요, Pergyra!")
    
    with slot<Int> as length {
        length.Write(message.Read().Length())
        Log("메시지 길이:", length.Read())
    }
    
    Log("메시지:", message.Read())
} // 자동으로 모든 슬롯 해제

// 병렬 처리 예제
let data = CreateArray(1000)

let results = Parallel {
    // 작업 A: 배열 정렬
    SortData(data)
    
    // 작업 B: 통계 계산
    CalculateStats(data)
    
    // 작업 C: 데이터 압축
    CompressData(data)
}

Log("병렬 처리 완료")

// 함수 정의
func Fibonacci(n: Int) -> Int {
    if n <= 1 {
        return n
    }
    
    with slot<Int> as prev {
        prev.Write(0)
        
        with slot<Int> as curr {
            curr.Write(1)
            
            for i in 2..n {
                let next = prev.Read() + curr.Read()
                prev.Write(curr.Read())
                curr.Write(next)
            }
            
            return curr.Read()
        }
    }
}

// 메인 실행부
let fibResult = Fibonacci(20)
Log("피보나치 20:", fibResult)